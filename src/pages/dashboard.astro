---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation';
import prisma from '../lib/db';
import { protectRoute } from '../utils/auth';

// Proteger esta ruta - solo usuarios autenticados pueden acceder
const result = await protectRoute(Astro);

// Si es una redirección, la función ya se encargó de redirigir
if (result instanceof Response) {
  return result;
}

// Si llegamos aquí, el usuario está autenticado
const { user } = result;

// Obtener datos para el dashboard
const today = new Date();
today.setHours(0, 0, 0, 0);

const tomorrow = new Date(today);
tomorrow.setDate(tomorrow.getDate() + 1);

const formattedToday = today.toISOString().split('T')[0];

// Comidas de hoy
const meals = await prisma.meal.findMany({
  where: {
    userId: user.id,
    date: {
      gte: today,
      lt: tomorrow
    }
  },
  orderBy: {
    time: 'asc'
  },
  include: {
    dishes: {
      include: {
        nutritionalValue: true
      }
    },
    symptoms: true
  }
});

// Síntomas de hoy
const symptoms = await prisma.symptom.findMany({
  where: {
    userId: user.id,
    date: {
      gte: today,
      lt: tomorrow
    }
  },
  orderBy: {
    time: 'asc'
  }
});

// Estadísticas generales
const totalMeals = await prisma.meal.count({
  where: {
    userId: user.id
  }
});

const totalSymptoms = await prisma.symptom.count({
  where: {
    userId: user.id
  }
});

// Calcular calorías totales del día
const totalCalories = meals.reduce((acc, meal) => {
  return acc + meal.dishes.reduce((dishAcc, dish) => {
    return dishAcc + (dish.nutritionalValue?.calories || 0);
  }, 0);
}, 0);

const hasMeals = meals.length > 0;
const hasSymptoms = symptoms.length > 0;
---

<Layout title="Dashboard">
  <Navigation user={user} client:load />
  
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
      <div>
        <h1 class="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">Dashboard</h1>
        <p class="text-gray-600 dark:text-gray-300 mt-1">Resumen de tu día: {formattedToday}</p>
      </div>
      <div class="mt-4 md:mt-0 flex space-x-3">
        <a href="/meals/new" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          Registrar comida
        </a>
        <a href="/symptoms/new" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          Registrar síntomas
        </a>
      </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="p-3 rounded-full bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400 mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
          </div>
          <div>
            <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Comidas registradas</p>
            <p class="text-2xl font-semibold text-gray-900 dark:text-white">{totalMeals}</p>
          </div>
        </div>
      </div>
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="p-3 rounded-full bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400 mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
          </div>
          <div>
            <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Síntomas registrados</p>
            <p class="text-2xl font-semibold text-gray-900 dark:text-white">{totalSymptoms}</p>
          </div>
        </div>
      </div>
      
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="p-3 rounded-full bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400 mr-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
          </div>
          <div>
            <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Calorías hoy</p>
            <p class="text-2xl font-semibold text-gray-900 dark:text-white">{Math.round(totalCalories)}</p>
          </div>
        </div>
      </div>
    </div>
    
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <section class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        <div class="p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 class="text-lg font-medium text-gray-900 dark:text-white">Comidas de hoy</h2>
        </div>
        
        <div class="p-6">
          {hasMeals ? (
            <div class="space-y-6">
              {meals.map((meal) => (
                <div class="border-l-4 border-primary-500 pl-4 py-2">
                  <div class="flex justify-between items-start">
                    <div>
                      <p class="font-medium text-gray-900 dark:text-white">
                        {meal.dishes.length > 0 ? meal.dishes[0].name : 'Comida sin nombre'}
                        <span class="text-gray-500 dark:text-gray-400 text-sm font-normal ml-2">
                          ({meal.mealType.charAt(0) + meal.mealType.slice(1).toLowerCase()})
                        </span>
                      </p>
                      <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">{meal.description || 'Sin descripción'}</p>
                      
                      {meal.dishes.some(dish => dish.nutritionalValue) && (
                        <div class="mt-2 flex items-center text-sm text-gray-500 dark:text-gray-400">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                          </svg>
                          {Math.round(meal.dishes.reduce((acc, dish) => acc + (dish.nutritionalValue?.calories || 0), 0))} kcal
                        </div>
                      )}
                    </div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">
                      {new Date(meal.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div class="text-center py-8">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No hay comidas registradas hoy</h3>
              <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Comienza registrando lo que comes para hacer seguimiento.</p>
              <div class="mt-6">
                <a href="/meals/new" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700">
                  <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                  </svg>
                  Registrar comida
                </a>
              </div>
            </div>
          )}
        </div>
      </section>
      
      <section class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        <div class="p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 class="text-lg font-medium text-gray-900 dark:text-white">Síntomas de hoy</h2>
        </div>
        
        <div class="p-6">
          {hasSymptoms ? (
            <div class="space-y-6">
              {symptoms.map((symptom) => (
                <div class="border-l-4 border-yellow-500 pl-4 py-2">
                  <div class="flex justify-between items-start">
                    <div>
                      <div class="flex items-center">
                        <div class="flex items-center mr-2">
                          {Array.from({ length: 5 }).map((_, i) => (
                            <svg 
                              xmlns="http://www.w3.org/2000/svg" 
                              class={`h-4 w-4 ${i < symptom.wellnessLevel ? 'text-yellow-500' : 'text-gray-300 dark:text-gray-600'}`}
                              viewBox="0 0 20 20" 
                              fill="currentColor"
                            >
                              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                            </svg>
                          ))}
                        </div>
                        <span class="text-sm text-gray-500 dark:text-gray-400">
                          Nivel de bienestar: {symptom.wellnessLevel}/5
                        </span>
                      </div>
                      
                      <div class="mt-2 flex flex-wrap gap-1">
                        {symptom.symptoms.map((s: string) => (
                          <span class="px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300">
                            {s}
                          </span>
                        ))}
                      </div>
                      
                      {symptom.notes && (
                        <p class="text-sm text-gray-600 dark:text-gray-400 mt-2">{symptom.notes}</p>
                      )}
                    </div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">
                      {new Date(symptom.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div class="text-center py-8">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No hay síntomas registrados hoy</h3>
              <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Registra cómo te sientes para hacer un seguimiento.</p>
              <div class="mt-6">
                <a href="/symptoms/new" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700">
                  <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                  </svg>
                  Registrar síntomas
                </a>
              </div>
            </div>
          )}
        </div>
      </section>
    </div>
  </main>
</Layout>