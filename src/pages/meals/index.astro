---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation';
import prisma from '../../lib/db';
import { protectRoute } from '../../utils/auth';

// Proteger esta ruta - solo usuarios autenticados pueden acceder
const result = await protectRoute(Astro);

// Si es una redirección, la función ya se encargó de redirigir
if (result instanceof Response) {
  return result;
}

// Si llegamos aquí, el usuario está autenticado
const { user } = result;

// Parámetros de paginación y filtrado
const page = Number(Astro.url.searchParams.get('page') || '1');
const limit = 10;
const skip = (page - 1) * limit;

// Obtener comidas del usuario
const meals = await prisma.meal.findMany({
  where: {
    userId: user.id,
  },
  orderBy: [
    { date: 'desc' },
    { time: 'desc' },
  ],
  include: {
    dishes: {
      include: {
        nutritionalValue: true
      }
    },
    symptoms: {
      select: {
        id: true,
        wellnessLevel: true,
        symptoms: true,
      },
    },
  },
  skip,
  take: limit,
});

// Contar total de comidas para la paginación
const totalMeals = await prisma.meal.count({
  where: {
    userId: user.id,
  },
});

const totalPages = Math.ceil(totalMeals / limit);

// Formatear fechas y horas para mostrar
const formattedMeals = meals.map(meal => {
  const date = new Date(meal.date);
  const mealDate = date.toLocaleDateString('es-ES', { 
    day: '2-digit', 
    month: '2-digit', 
    year: 'numeric' 
  });
  
  const time = new Date(`1970-01-01T${meal.time.toISOString().split('T')[1]}`);
  const mealTime = time.toLocaleTimeString('es-ES', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });
  
  const mealTypeMap = {
    BREAKFAST: 'Desayuno',
    LUNCH: 'Almuerzo',
    DINNER: 'Comida',
    SNACK: 'Snack',
    BRUNCH: 'Brunch',
    SUPPER: 'Cena'
  };
  
  return {
    ...meal,
    formattedDate: mealDate,
    formattedTime: mealTime,
    formattedMealType: mealTypeMap[meal.mealType as keyof typeof mealTypeMap],
  };
});

const hasMeals = meals.length > 0;
---

<Layout title="Mis comidas">
  <Navigation user={user} client:load />
  
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
      <div>
        <h1 class="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">Mis comidas</h1>
        <p class="text-gray-600 dark:text-gray-300 mt-1">
          Historial de todas tus comidas registradas
        </p>
      </div>
      <div class="mt-4 md:mt-0">
        <a href="/meals/new" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          Registrar comida
        </a>
      </div>
    </div>
    
    {hasMeals ? (
      <div class="bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden">
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Fecha y hora
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Tipo
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Comida
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Nutrición
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Bienestar
                </th>
                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {formattedMeals.map((meal) => (
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900 dark:text-white">{meal.formattedDate}</div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">{meal.formattedTime}</div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="px-2 py-1 inline-flex text-xs leading-5 font-medium rounded-full bg-primary-100 text-primary-800 dark:bg-primary-800 dark:text-primary-100">
                      {meal.formattedMealType}
                    </span>
                  </td>
                  <td class="px-6 py-4">
                    <div class="text-sm font-medium text-gray-900 dark:text-white">{meal.dishes && meal.dishes.length > 0 ? meal.dishes[0].name : 'Sin nombre'}</div>
                    <div class="text-sm text-gray-500 dark:text-gray-400 line-clamp-1">{meal.description || 'Sin descripción'}</div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    {meal.dishes && meal.dishes.length > 0 && meal.dishes[0].nutritionalValue ? (
                      <div class="text-sm text-gray-900 dark:text-white">
                        {Math.round(meal.dishes[0].nutritionalValue.calories)} kcal
                      </div>
                    ) : (
                      <span class="text-sm text-gray-500 dark:text-gray-400">No disponible</span>
                    )}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    {meal.symptoms.length > 0 ? (
                      <div class="flex items-center">
                        <div class="flex items-center">
                          {Array.from({ length: 5 }).map((_, i) => (
                            <svg 
                              xmlns="http://www.w3.org/2000/svg" 
                              class={`h-4 w-4 ${i < meal.symptoms[0].wellnessLevel ? 'text-yellow-500' : 'text-gray-300 dark:text-gray-600'}`}
                              viewBox="0 0 20 20" 
                              fill="currentColor"
                            >
                              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118l-2.8-2.034c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                            </svg>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <span class="text-sm text-gray-500 dark:text-gray-400">No registrado</span>
                    )}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <a href={`/meals/${meal.id}-v2`} class="text-primary-600 hover:text-primary-900 dark:text-primary-400 dark:hover:text-primary-300 mr-3">
                      Ver
                    </a>
                    <a href={`/meals/edit-v2?id=${meal.id}`} class="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300">
                      Editar
                    </a>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        {totalPages > 1 && (
          <div class="bg-white dark:bg-gray-800 px-4 py-3 flex items-center justify-between border-t border-gray-200 dark:border-gray-700 sm:px-6">
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p class="text-sm text-gray-700 dark:text-gray-300">
                  Mostrando <span class="font-medium">{skip + 1}</span> a <span class="font-medium">{Math.min(skip + limit, totalMeals)}</span> de <span class="font-medium">{totalMeals}</span> resultados
                </p>
              </div>
              <div>
                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  <a
                    href={page > 1 ? `/meals?page=${page - 1}` : '#'}
                    class={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium ${page > 1 ? 'text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700' : 'text-gray-400 dark:text-gray-600 cursor-not-allowed'}`}
                  >
                    <span class="sr-only">Anterior</span>
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </a>
                  
                  {Array.from({ length: totalPages }).map((_, i) => {
                    const pageNumber = i + 1;
                    const isCurrentPage = pageNumber === page;
                    
                    return (
                      <a
                        href={`/meals?page=${pageNumber}`}
                        class={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                          isCurrentPage 
                            ? 'z-10 bg-primary-50 dark:bg-primary-900 border-primary-500 dark:border-primary-400 text-primary-600 dark:text-primary-200' 
                            : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
                        }`}
                      >
                        {pageNumber}
                      </a>
                    );
                  })}
                  
                  <a
                    href={page < totalPages ? `/meals?page=${page + 1}` : '#'}
                    class={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium ${page < totalPages ? 'text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700' : 'text-gray-400 dark:text-gray-600 cursor-not-allowed'}`}
                  >
                    <span class="sr-only">Siguiente</span>
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                  </a>
                </nav>
              </div>
            </div>
          </div>
        )}
      </div>
    ) : (
      <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6 text-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No hay comidas registradas</h3>
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Comienza registrando tus comidas para hacer seguimiento.</p>
        <div class="mt-6">
          <a href="/meals/new" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700">
            <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Registrar primera comida
          </a>
        </div>
      </div>
    )}
  </main>
</Layout>